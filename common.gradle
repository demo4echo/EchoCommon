//import org.ajoberstar.grgit.Person

//buildscript {
//	repositories {
		// Use 'jcenter' for resolving your dependencies.
		// You can declare any Maven/Ivy/file repository here.
//		jcenter()
//	}

//	dependencies {
//		classpath 'org.ajoberstar.grgit:grgit-core:4.0.1'
//	}
//}

// Load common functions
apply from: "${-> common_sub_module_name}${File.separator}common.groovy"

// Load branch specific properties
def branchSpecificProps = new Properties()
file(CONST_BRANCH_SPECIFIC_CONFIGURATION_FILE_NAME).withInputStream { branchSpecificProps.load(it) }

// Adding some properties
ext {
	serviceName = service_name
	productName = project.name
	productRepository = "${serviceName}/${productName}"
	productK8ShelmChartsFolder = "k8s${File.separator}helm${File.separator}charts"
	dockerFilePath = project.hasProperty('dockerFilePathOverride') ? "${-> dockerFilePathOverride}" : "${-> common_sub_module_name}${File.separator}Dockerfile"
	vcsURL = grgit.remote.list()[0].url
	vcsRevision = grgit.head().id
	vcsAbbreviatedRevision = grgit.head().abbreviatedId
	vcsUsername = grgit.repository.jgit.repository.config.getString("user", null, "name") ?: "DevOpsUser4${serviceName}"
	vcsUseremail = grgit.repository.jgit.repository.config.getString("user", null, "email") ?: "devopsuser4${serviceName}@efrat.com"
	buildUser = System.properties['user.name']
	buildTimestamp = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
	buildFramework	= "Gradle ${gradle.gradleVersion}"
	buildJDK = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
	buildOS = "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
	publishArtifactsDirective = branchSpecificProps.publishArtifacts != null ? branchSpecificProps.publishArtifacts.toBoolean() : true
}

//
// Versioning (must be the first plugin setup)
//

// Add this setion to avoid:
// 	Could not evaluate onlyIf predicate for task ':reckonTagCreate'.
// 	> java.lang.String cannot be cast to org.ajoberstar.reckon.gradle.ReckonPlugin$DelayedVersion
gradle.taskGraph.beforeTask { Task task ->
	if (task.name == 'reckonTagCreate') {
		project.version = originalProjectVersionObject
	}
}
gradle.taskGraph.afterTask { Task task ->
	if (task.name == 'reckonTagCreate') {
		project.version = originalProjectVersionObject.toString()
	}
}

// The Reckon plugin
reckon {
	scopeFromProp()
//	stageFromProp("${reckon_development_stage_name}","${reckon_staging_stage_name}","${reckon_production_stage_name}","${reckon_FINAL_stage_name}")
	stageFromProp("${reckon_staging_stage_name}","${reckon_production_stage_name}","${reckon_FINAL_stage_name}")
}

// Reckon helpers
task printVersion
task stampVersion(dependsOn: reckonTagCreate)
task publishVersion(dependsOn: reckonTagPush)

// These properties must be defined after the reckon plugin is set up!
ext.originalProjectVersionObject = project.version
ext.productVersion = manifestVersion()

// Pre-Defined project properties
//project.description = 'The Echo demo product'
project.version = originalProjectVersionObject.toString()

// Configure protobuf
protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${dep_protoc_version}"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${dep_grpc_version}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
	main {
		java {
			srcDirs buildDir.getName() + "/generated/source/proto/main/grpc"
			srcDirs buildDir.getName() + "/generated/source/proto/main/java"
		}
	}
}

/* ----------------------------------------------------------------------------
 *
 *  Additional parts from EGradle template for comfortable eclipse setup
 *  (necessary, because every EGradle template MUST be importable out of the box)
 *
 * ---------------------------------------------------------------------------- */

// To have javadocs in eclipse added - where no sources are available - we need these lines:
// see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
eclipse {
	classpath {
		downloadSources = true // default: true
		downloadJavadoc = true // default: false
	}
}

// first define an array containing source folders to be always available - even when not existing already
def eclipseSourceFolders = [
	'src/main/java',
	'src/main/resources',
	'src/test/java',
	'src/test/resources'
];

// now create those source folders when not existing, when eclipse task is executed:
tasks.eclipse.dependsOn << {
	for (String sourceFolder: eclipseSourceFolders) {
		def resourceDir = new File(project.projectDir, sourceFolder)

		if (!resourceDir.exists() && !resourceDir.mkdirs()) {
			logger.info("Not able to create %1",resourceDir);
		}
	}
}

// Create an uber jar
jar {
	archiveVersion = productVersion
//	archiveClassifier = obtainCurrentBranchName()

	manifest {
			attributes(
				'Built-By'           : buildUser,
				'Build-Timestamp'    : buildTimestamp,
				'Build-Version'      : productVersion,
				'Build-Abbr-Revision': vcsAbbreviatedRevision,
				'Build-Revision'     : vcsRevision,
				'Created-By'         : buildFramework,
				'Build-Jdk'          : buildJDK,
				'Build-OS'           : buildOS
			)
	}

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

// Make prints in tests visible
test {
	systemProperties = System.properties

	outputs.upToDateWhen {false}

	testLogging {
		showStandardStreams = true
	}
}

// Can only be used within the cluster as the ecfobe doesn't expose external interfaces
task certify(dependsOn: test)

//
// Deal with kubectl port-forward blocking command
//

task startKubectlPortForwarding(type: SpawnProcessTask) {
	command "kubectl port-forward services/${productName}-service ${productInternalPort}:${productInternalPort}"
	ready 'Forwarding from'
//	pidLockFileName '.other.pid.lock'
}

task stopKubectlPortForwarding(type: KillProcessTask) {
//	pidLockFileName '.other.pid.lock'
}

// Special test task meant to run manually outside the cluster (development mode) and since the service isn't published outside
// the cluster, we'll need kubectl port forwarding
task testViaPortForwarding(dependsOn: [startKubectlPortForwarding,test,stopKubectlPortForwarding]) {
	test.mustRunAfter startKubectlPortForwarding

	stopKubectlPortForwarding.mustRunAfter test
}

//
// docker
//

docker {
	name "${productName}:${productVersion}"
	tag "dockerHub", "${productRepository}:${productVersion}"	// For DockerHub registry
//	tag "privateRegistry", "nexus:8080/demo4echo/echobe:${productVersion}"	// For private registry
	dockerfile file(dockerFilePath)
	buildArgs([
		SERVICE_NAME: serviceName,
		PRODUCT_NAME: productName,
		PRODUCT_VERSION: productVersion,
		PRODUCT_DESCRIPTION: project.description,
		MAINTAINER_USERNAME: vcsUsername,
		MAINTAINER_USEREMAIL: vcsUseremail,
		BUILD_DATE: buildTimestamp,
		VCS_URL: vcsURL,
		VCS_REF: vcsAbbreviatedRevision
	])
	files jar.outputs
	copySpec.into(buildDir.getName() + "/libs")
//	pull true
//	noCache true
}

// Give an alias to docker task
task dockerBuild(dependsOn: [docker])

dockerRun {
	name "${productName}"
	image "${productName}:${productVersion}"
	ports "${productExternalPort}:${productInternalPort}"
	env 'INTERNAL_PORT_ENV_VAR':"${productInternalPort}"
	daemonize true
	clean true
}

// Main task used from docker plugins
task dockerBuildAndPublish(dependsOn: dockerTagsPush)

// Special Docker task that can skip artifacts publishing upon request
task manifestDockerImage(dependsOn: dockerTag)
println "branchSpecificProps.publishArtifacts => [${branchSpecificProps.publishArtifacts}]"
println "publishArtifactsDirective => [${publishArtifactsDirective}]"
if (publishArtifactsDirective == true) {
	println "in finalizedBy"
	manifestDockerImage.finalizedBy dockerTagsPush
}

/**
// Give an alias to dockerRun task
task dockerStart(dependsOn: [dockerBuild,dockerRun]) {
	dockerRun.mustRunAfter dockerBuild
}
*/

//
// helm
//

helm {
	home = file("${System.properties['user.home']}${File.separator}.helm")
	debug = true

//	repositories {
//		inboundEchoCharts {
//			url = uri(helmChartsPublishingReposChartMuseumUrl)
//		}
//	}

	tiller {
		// Don't install the server
		install = false

		// Install/expect Tiller in a different namespace than kube-system
//		namespace = "custom-namespace"

		// Set a service account for Tiller
//		serviceAccount = "tiller-service-account"
	}

	filtering {
		// These values will be resolvable in all charts' YAML files (e.g. imageTag => ${productVersion})
		values.put 'chartDescription',"${project.description}"
		values.put 'appVersion',"${productVersion}"
		values.put 'maintainer.name',"${vcsUsername}"
		values.put 'maintainer.email',"${vcsUseremail}"
		values.put 'imageRepository',manifestImageName(branchSpecificProps)
		values.put 'imageTag',"${productVersion}"
		values.put 'servicePort',"${productInternalPort}"
		values.put 'serviceTargetPort',"${productInternalPort}"
		values.put 'serviceNodePort',"${productExternalPort}"
	}

	charts {
		"${productName}" {
			chartName = productName
			chartVersion = helmChartVersion ?: productVersion
			sourceDir = file("${productK8ShelmChartsFolder}${File.separator}${productName}")
		}
	}

	// The "charts" section (above) can also be defined using a pre-defined default chart named 'main'
//	helm.charts.main.chartName = productName
//	helm.charts.main.chartVersion = productVersion
//	helm.charts.main.sourceDir = file("${productK8ShelmChartsFolder}${File.separator}${productName}")

	lint {
		// enable/disable linting by default
		enabled = true
		// treat linter warnings as errors (failing the build)
		strict = true
	}

	releases {
		"${productName}" {
//			from chart('main')
			from chart("${productName}")

			// Namespace to install the release into. Defaults to the current kube config namespace.
			namespace = manifestNamespace()

			// If true, the associated helmDelete task will purge the release, completely removing the release from the store and making its name free for later use
			purge = true

			// If true, the associated helmInstall task will replace an existing release with the same name (using helm install --replace instead of helm upgrade --install).
//			replace = true

			// If true, perform a dry run
//			dryRun = true

			// pass values (like --set on the command line)
//			values = ['image.tag':"${productVersion}"]

			// If true, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful
//			wait = true

			//  If set, installation process purges chart on fail, also sets --wait flag
			atomic = true
		}
	}

//	publishing {
//		repositories {
//			chartMuseum('outboundEchoCharts') {
//			chartMuseum {
//				url = uri(helmChartsPublishingReposChartMuseumUrl)
//			}
//		}
//	}
}

task helmUpdate(dependsOn: helmInstall)
task helmUninstall(dependsOn: helmDelete)

task helmTest(type:Exec) {
	executable "helm"
	args "test","${productName}"
}

task helmTestAndClean(type:Exec) {
	executable "helm"
	args "test","${productName}","--cleanup"
}

// Main task used from helm plugins
task helmPackageAndPublish(dependsOn: [helmPackage,helmPublish]) {
	helmPublish.mustRunAfter helmPackage
}

// Special Helm task that can skip artifacts publishing upon request
task manifestHelmChart(dependsOn: helmPackage)
if (publishArtifactsDirective == true) {
	manifestHelmChart.finalizedBy helmPublish
}

// Notes:
// 1. helmPackge and helmInstall tasks are used as is
// 2. helmInstall and helmUninstall (helmDelete) can be used with "-Phelm.dryRun"

//
// Works with org.ajoberstar.grgit plugin
//

task designatedTagCreate {
	description = 'Tags the current head with a designated name'

	def tagName = null
	def tagMessage = null

	doFirst {
		if (project.hasProperty(CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME) == false || project.ext[CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME].trim().isEmpty() == true) {
			throw new GradleException("Missing or Empty '${CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME}' project property")
		}
		else {
			tagName = project.ext[CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME]
		}

		if (project.hasProperty(CONST_DESIGNATED_TAG_MESSAGE_PROJECT_PROPERTY_NAME) == true && project.ext[CONST_DESIGNATED_TAG_MESSAGE_PROJECT_PROPERTY_NAME].trim().isEmpty() == false) {
			tagMessage = project.ext[CONST_DESIGNATED_TAG_MESSAGE_PROJECT_PROPERTY_NAME]
		}
		else {
			tagMessage = "Release of ${tagName}"
		}
	}

	doLast {
		grgit.tag.add {
			name = tagName
			message = tagMessage
			force = true
//			tagger = new Person(vcsUsername,vcsUseremail)
		}

		println "Designated tag cretaed: ${project.ext[CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME]}"
	}
}

task designatedTagDestroy {
	description = 'Removes designated tag name from GIT'

	doFirst {
		if (project.hasProperty(CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME) == false || project.ext[CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME].trim().isEmpty() == true)
		{
			throw new GradleException("Missing or Empty '${CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME}' project property")
		}
	}

	doLast {
		grgit.tag.remove {
			names = [project.ext[CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME]]
		}

		println "Designated tag destroyed: ${project.ext[CONST_DESIGNATED_TAG_NAME_PROJECT_PROPERTY_NAME]}"
	}
}

// Requires the use of "-Dorg.ajoberstar.grgit.auth.username" (with a proper token) for authentication
task gitPush {
	description = "Pushes current branch's committed changes to origin repo"

	doLast {
		grgit.push {
			tags = true
//			dryRun = true
		}
	}
}

task gitPull {
	description = "Pulls origin repo's committed changes to current branch"

	doLast {
		grgit.pull {
			rebase = true
		}
	}
}

// DesignatedVersion helpers
task printDesignatedVersion {
	doLast {
		println "Designated version: ${productVersion}"
	}
}
task stampDesignatedVersion(dependsOn: designatedTagCreate)
task publishDesignatedVersion(dependsOn: [stampDesignatedVersion,gitPush]) {
	gitPush.mustRunAfter stampDesignatedVersion
}

// One version to rule them all
task printApplicableVersion {
	doLast {
		def applicableVersionName = obtainApplicableVersionName()

		println "Prime version: ${applicableVersionName}"
	}
}

// The most recent version that exists in the VCS (last generated tag)
task printLatestVersion {
	doLast {
		def latestTag = obtainLatestTag()
		def latestTagName = latestTag.name
		def latestTagDateTime = latestTag.dateTime

		println "Recent version: ${latestTagName}@${latestTagDateTime}"
	}
}
