
// Load environment variables
def envVarsProps = new Properties()
file("EnvFile.properties").withInputStream { envVarsProps.load(it) }

// Load common functions
apply from: "./${-> envVarsProps.JENKINS_SLAVE_K8S_COMMON_SUB_MODULE_NAME}/common.groovy"

// Adding some properties
ext {
	serviceName = envVarsProps.SERVICE_NAME_ENV_VAR
	productName = "${project.name}"
	productRepository = "${serviceName}/${productName}"
	productK8ShelmChartsFolder = "k8s/helm/charts"
	productionBranchName = envVarsProps.PRODUCTION_BRANCH_NAME_ENV_VAR
	stagingBranchName = envVarsProps.STAGING_BRANCH_NAME_ENV_VAR
	dockerFilePath = "./${-> envVarsProps.JENKINS_SLAVE_K8S_COMMON_SUB_MODULE_NAME}/Dockerfile"
}

//
// Versioning (must be the first plugin setup)
//

// Add this setion to avoid:
// 	Could not evaluate onlyIf predicate for task ':reckonTagCreate'.
// 	> java.lang.String cannot be cast to org.ajoberstar.reckon.gradle.ReckonPlugin$DelayedVersion
gradle.taskGraph.beforeTask { Task task ->
	if (task.name == 'reckonTagCreate') {
		project.version = originalProjectVersionObject
	}
}
gradle.taskGraph.afterTask { Task task ->
	if (task.name == 'reckonTagCreate') {
		project.version = originalProjectVersionObject.toString()
	} 
}

// The Reckon plugin
reckon {
	scopeFromProp()
	stageFromProp("${reckon_development_stage_name}","${reckon_integration_stage_name}","${reckon_production_stage_name}")
}

// Reckon helpers
task printVersion
task stampVersion(dependsOn: reckonTagCreate)
task publishVersion(dependsOn: reckonTagPush)

// These properties must be defined after the reckon plugin is set up!
ext.originalProjectVersionObject = project.version
ext.productVersion = manifestVersion()

// Pre-Defined project properties
project.description = 'The Echo Backend demo product'
project.version = originalProjectVersionObject.toString()

// Configure protobuf
protobuf {
	protoc { 
   	artifact = "com.google.protobuf:protoc:${dep_protoc_version}" 
   }
	plugins {
		grpc { 
			artifact = "io.grpc:protoc-gen-grpc-java:${dep_grpc_version}" 
		}
	}
	generateProtoTasks {
		all()*.plugins { 
			grpc {} 
		}
	}
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
	main {
		java {
			srcDirs buildDir.getName() + "/generated/source/proto/main/grpc"
			srcDirs buildDir.getName() + "/generated/source/proto/main/java"
		}
	}
}

/* ----------------------------------------------------------------------------
 *
 *  Additional parts from EGradle template for comfortable eclipse setup
 *  (necessary, because every EGradle template MUST be importable out of the box)
 * 
 * ---------------------------------------------------------------------------- */

// To have javadocs in eclipse added - where no sources are available - we need these lines:
// see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
eclipse {	 
	classpath {
		downloadSources = true // default: true
		downloadJavadoc = true // default: false
	}
} 

// first define an array containing source folders to be always available - even when not existing already
def eclipseSourceFolders = [
	'src/main/java',
	'src/main/resources',
	'src/test/java',
	'src/test/resources'
];

// now create those source folders when not existing, when eclipse task is executed:
tasks.eclipse.dependsOn << {	
	for (String sourceFolder: eclipseSourceFolders) { 
		def resourceDir = new File(project.projectDir, sourceFolder)
		
		if (!resourceDir.exists() && !resourceDir.mkdirs()) {
    		logger.info("Not able to create %1",resourceDir);
    	}
	}
}

// Create an uber jar
jar {
	archiveClassifier=obtainCurrentBranchName()
	
	manifest {
   		attributes "Main-Class": "com.efrat.example.devops.echoServerBEApp.EchoServerBEApp"
	}

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

// Make prints in tests visible
test {
	systemProperties = System.properties

	// Setup additional environment variables
//	environment.put("ECHOBE_SERVICE_ENDPOINT_NAMESPACE",manifestNamespace())

	outputs.upToDateWhen {false}

	testLogging {
		showStandardStreams = true
	}
}

// Can only be used within the cluster as the ecfobe doesn't expose external interfaces
task certify(dependsOn: 'test')

// Special test task meant to run manually outside the cluster (development mode) and since the service isn't published outside
// the cluster, we'll need kubectl port forwarding
task testViaPortForwarding(dependsOn: ['startKubectlPortForwarding','test','stopKubectlPortForwarding'])

//
// Deal with kubectl port-forward blocking command
//

task startKubectlPortForwarding(type: SpawnProcessTask) {
	command "kubectl port-forward services/${productName}-service ${productInternalPort}:${productInternalPort}"
	ready 'Forwarding from'
//	pidLockFileName '.other.pid.lock'	
}

task stopKubectlPortForwarding(type: KillProcessTask) {
//	pidLockFileName '.other.pid.lock'	
}

//
// docker
//

docker {
	name "${productName}:${productVersion}"
	tag "privateRegistry", "${productRepository}:${productVersion}"	// For DockerHub registry
	dockerfile file(dockerFilePath)
	buildArgs([JAR_PRODUCT_NAME:"${project.name}",JAR_PRODUCT_VERSION:"${productVersion}"])
	files jar.outputs
	copySpec.into(buildDir.getName() + "/libs")
//	pull true
//	noCache true
}

// Give an alias to docker task
task dockerBuild(dependsOn: ['jar','docker'])

dockerRun {
	name "${productName}"
	image "${productName}:${productVersion}"
	ports "${productExternalPort}:${productInternalPort}"
	env 'INTERNAL_PORT_ENV_VAR':"${productInternalPort}"
	daemonize true
	clean true
}

// Main task used from docker plugins
task dockerBuildAndPublish(dependsOn: 'dockerPushPrivateRegistry')

// Give an alias to dockerRun task
task dockerStart(dependsOn: ['dockerBuild','dockerRun'])

//
// helm
//

helm {
	home = file("${System.properties['user.home']}${File.separator}.helm")
	debug = true

//	repositories {
//		inboundEchoCharts {
//			url = uri(helmChartsPublishingReposChartMuseumUrl)
//		}
//	}

	tiller {
		// Don't install the server
		install = false
		
		// Install/expect Tiller in a different namespace than kube-system
//		namespace = "custom-namespace"

		// Set a service account for Tiller
//		serviceAccount = "tiller-service-account"
	}

	filtering {
		// These values will be resolvable in all charts' YAML files (e.g. imageTag => ${productVersion})
		values.put 'imageTag',"${productVersion}"
		values.put 'imageRepository',"${productRepository}"
		values.put 'servicePort',"${productInternalPort}"
		values.put 'serviceTargetPort',"${productInternalPort}"
		values.put 'serviceNodePort',"${productExternalPort}"
	}

	// The Charts section
	helm.charts.main.chartName = productName
	helm.charts.main.chartVersion = productVersion
	helm.charts.main.sourceDir = file("${productK8ShelmChartsFolder}/${productName}")

	lint {
		// enable/disable linting by default
		enabled = true
		// treat linter warnings as errors (failing the build)
		strict = true
	}

	releases {
		"${productName}" {
			from chart('main')

			// Namespace to install the release into. Defaults to the current kube config namespace.
			namespace = manifestNamespace()

			// If true, the associated helmDelete task will purge the release, completely removing the release from the store and making its name free for later use
			purge = true

			// If true, the associated helmInstall task will replace an existing release with the same name (using helm install --replace instead of helm upgrade --install).			
//			replace = true 
			
			// If true, perform a dry run 
//			dryRun = true
			
			// pass values (like --set on the command line)
//			values = ['image.tag':"${productVersion}"]

			// If true, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment are in a ready state before marking the release as successful
			wait = true
		}		
	}

//	publishing {
//		repositories {
//			chartMuseum('outboundEchoCharts') {
//			chartMuseum {
//				url = uri(helmChartsPublishingReposChartMuseumUrl)
//			}
//		}
//	}
}

task helmUpdate(dependsOn: 'helmInstall')
task helmUninstall(dependsOn: 'helmDelete')

task helmTest(type:Exec) {
	executable "helm"
	args "test","${productName}"
}

task helmTestAndClean(type:Exec) {
	executable "helm"
	args "test","${productName}","--cleanup"
}

// Notes:
// 1. helmPackge and helmInstall tasks are used as is
// 2. helmInstall and helmUninstall (helmDelete) can be used with "-Phelm.dryRun"

//
// Works with org.ajoberstar.grgit plugin
//

task designatedTagCreate {
	description = 'Tags the current head with a designated name'
	
	doFirst {
		if (project.hasProperty('demo4echo.designatedTagName') == false)
		{
			throw new GradleException("Missing 'demo4echo.designatedTagName' project property")
		}
	}
	
	doLast {
		grgit.tag.add {
			name = project.ext['demo4echo.designatedTagName']
			message = "Release of ${name}"
		}
		
		println "Designated tag cretaed: ${project.ext['demo4echo.designatedTagName']}"
	}
}

task designatedTagDestroy {
	description = 'Removes designated tag name from GIT'
	
	doFirst {
		if (project.hasProperty('demo4echo.designatedTagName') == false)
		{
			throw new GradleException("Missing 'demo4echo.designatedTagName' project property")
		}
	}
	
	doLast {
		grgit.tag.remove {
			names = [project.ext['demo4echo.designatedTagName']]
		}
		
		println "Designated tag destroyed: ${project.ext['demo4echo.designatedTagName']}"
	}
}

// Requires the use of "-Dorg.ajoberstar.grgit.auth.username" (with a proper token) for authentication
task gitPush {
	description = "Pushes current branch's committed changes to origin repo"
	
	doLast {
		grgit.push {
			tags = true
//			dryRun = true
		}
	}
}

task gitPull {
	description = "Pulls origin repo's committed changes to current branch"
	
	doLast {
		grgit.pull {
			rebase = true
		}
	}
}
