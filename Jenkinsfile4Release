// We can omit this one as we marked the shared library to load implicitly
@Library('EchoSharedLibrary') _

// Load shared resources
def jenkinsSlavePodManifestResourceAsString = libraryResource 'jenkinsSlavePodManifest.yaml'

pipeline {
	agent {
		kubernetes {
			cloud pipelineCommon.resolveCloudNameByBranchName()
			label pipelineCommon.constructJenkinsSlavePodAgentLabel()
			defaultContainer pipelineCommon.K8S_AGENT_DEFAULT_CONTAINER
			yaml jenkinsSlavePodManifestResourceAsString
		}
	}
	options { 
		timestamps()
		
		buildDiscarder(logRotator(numToKeepStr: pipelineCommon.OPTIONS_BUILD_DISCARDER_LOG_ROTATOR_NUM_TO_KEEP_STR))

		parallelsAlwaysFailFast()
	}
	parameters {
		choice (
			name: 'TARGET_JENKINSFILE_FILE_NAME',
			choices: [
				pipelineCommon.PARAMS_TARGET_JENKINSFILE_FILE_NAME_OPTIONS[0],
				pipelineCommon.PARAMS_TARGET_JENKINSFILE_FILE_NAME_OPTIONS[1],
				pipelineCommon.PARAMS_TARGET_JENKINSFILE_FILE_NAME_OPTIONS[2]
			],
			description: 'The desired Jenkinsfile to run'
		)
		choice (
			name: 'TARGET_RECKON_SCOPE',
			choices: [
				pipelineCommon.PARAMS_TARGET_RECKON_SCOPE_OPTIONS[0],
				pipelineCommon.PARAMS_TARGET_RECKON_SCOPE_OPTIONS[1],
				pipelineCommon.PARAMS_TARGET_RECKON_SCOPE_OPTIONS[2],
				pipelineCommon.PARAMS_TARGET_RECKON_SCOPE_OPTIONS[3]
			],
			description: 'The desired reckon scope to use in the build'
		)
		choice (
			name: 'TARGET_RECKON_STAGE',
			choices: [
				pipelineCommon.PARAMS_TARGET_RECKON_STAGE_OPTIONS[0],
				pipelineCommon.PARAMS_TARGET_RECKON_STAGE_OPTIONS[1],
				pipelineCommon.PARAMS_TARGET_RECKON_STAGE_OPTIONS[2],
				pipelineCommon.PARAMS_TARGET_RECKON_STAGE_OPTIONS[3]
			],
			description: 'The desired reckon stage to use in the build'
		)
		validatingString (
			name: 'DESIGNATED_VERSION',
			defaultValue: pipelineCommon.PARAMS_DESIGNATED_VERSION_DEFAULT_VALUE,
			regex: pipelineCommon.PARAMS_DESIGNATED_VERSION_REG_EXP,
			failedValidationMessage: "Validation of designated version failed!",
			description: """
			The desiganted (desired) version to be used.
			Notes:
			------
			1. The input given must comply with 'Semantic Versioning 2.0.0' (https://semver.org) with regards to: <MAJOR>.<MINOR>.<PATCH>
			2. The version supplied must be higher than any existing version (tag) in the target repo(s)
			3. This will void the use of the 'TARGET_RECKON_SCOPE' and 'TARGET_RECKON_STAGE' parameters!
			"""
		)
		string (
			name: 'DESIGNATED_VERSION_MESSAGE',
			defaultValue: pipelineCommon.PARAMS_DESIGNATED_VERSION_MESSAGE_DEFAULT_VALUE,
			description: 'If applicable (and only for designated version), place a message that will be attached to the designated version (e.g. a customer name)'
		)
		booleanParam (
			name: 'PUBLISH_LATEST_ARTIFACTS',
			defaultValue: pipelineCommon.PARAMS_PUBLISH_LATEST_ARTIFACTS_DEFAULT_VALUE,
			description: 'If selected (and applicable only for Jenkins4Release), publishes the latest artifacts to production/customer repositories'
		)
	}
	environment {
		// We use this dummy environment variable to load all the properties from the designated file into environment variable (per branch)
		X_EFRAT_ECHO_DUMMY_ENV_VAR = pipelineCommon.assimilateEnvironmentVariables()

		// Obtain the access token Jenkins uses to connect to GitHub (using a Jenkins credentials ID)
		GITHUB_ACCESS_TOKEN = credentials('github-demo4echo-access-token-for-reckon-gradle-plugin-id')

		// Obtain the most recent version
//		X_EFRAT_ECHO_LATEST_VERSION_ENV_VAR = sh (script: "./gradlew printLatestVersion | grep Recent | awk '{print \$3}'",returnStdout: true)
	}
	stages {
		stage('\u2776 setup \u2728') {
			steps {
				//
				// Verify this build should run (e.g. don't allow a replayed build) - this step should be the first step!
				//
				validateBuildRun "${env.BUILD_TAG}"

				sh 'echo User [`whoami`] is running within [`ps -hp $$ | awk \'{print $5}\'`] Shell on Node [$NODE_HOST_NAME_ENV_VAR]'
				sh 'echo The following script is executing: [$0]'

				sh 'echo JAVA_HOME value is: [$JAVA_HOME]'
				sh 'echo PATH value is: [$PATH]'
				sh 'echo PWD value is: [$PWD]'

				sh "mkdir -p /root/.docker && cp -ar ./${env.COMMON_SUB_MODULE_FOLDER_NAME_ENV_VAR}/.setup/.docker /root"
				sh "mkdir -p /root/.kube && cp -ar ./${env.COMMON_SUB_MODULE_FOLDER_NAME_ENV_VAR}/.setup/.kube /root"
				sh "mkdir -p /root/.gradle && cp -ar ./${env.COMMON_SUB_MODULE_FOLDER_NAME_ENV_VAR}/.setup/.gradle /root"

				//
				// Update build name and description (but in this case no need to add the version to the build name)
				//
				updateBuildInformation(false)

				// For Debug Only!
//				sleep 300
			}
		}
		stage('\u2777 Publish Latest Artifacts \u2728') {
			when { 
				expression { 
					params.PUBLISH_LATEST_ARTIFACTS == true 
				} 
			}
			steps {
				script {
					// Test
					def latestVersion = sh (script: "echo `./gradlew printLatestVersion | grep Recent | awk '{print \$3}'`",returnStdout: true)
					println "The latest version is: [${latestVersion[0..-2]}]"
					println "The length of the latest version is: [${latestVersion.size()}]"
					env.X_EFRAT_ECHO_LATEST_VERSION_ENV_VAR = latestVersion[0..-2]

					// Pseodu stage (should push latest Docker image and Helm chart to external repository)
					echo "New latest version is: [${env.X_EFRAT_ECHO_LATEST_VERSION_ENV_VAR}]"
				}
			}
		}
	}
	post {
		always {
			echo 'One way or another, I have finished'

			// Do some cleanup
//			sh "rm /root/.gradle/gradle.properties"
//			sh "rm /root/.gradle/init.gradle"
		}
		success {
			echo 'I succeeeded!'
		}
		unstable {
			echo 'I am unstable :/'
		}
		failure {
			echo 'I failed :('
		}
		changed {
			echo 'Things were different before...'
		}
	}
}
